(*
https://adventofcode.com/2020/day/17
*)

open Printf

let input_test = [
    "2 * 3 + (4 * 5)";
    "5 + (8 * 3 + 9 + 3 * 4 * 3)";
    "5 * 9 * (7 * 3 * 3 + 9 * 3 + (8 + 6 * 4))";
    "((2 + 4 * 9) * (6 + 9 * 8 + 6) + 6) + 2 + 4 * 2";
];;

let input = [
    "9 + 2 * ((7 + 9 + 5 + 7) * 3 + (5 * 3 * 6 * 5 + 6) + (9 * 4 + 9 * 6 + 9)) * 8 + 5";
    "(5 * 2 * 2 + (3 * 8 * 9 * 7) * 3 * 9) * (7 + 3 + (5 + 4 + 8 + 6) + 3 + 2 + 2) * 4 * 8";
    "2 + 6 * (2 * (2 * 6) * 3 + (7 + 2 * 4 + 7)) * 8 + 5 * 4";
    "7 + 5 + (8 * 6 + 8) * 6 + (4 * 3 + 5 * 8 + 7 * 9) + 5";
    "((4 * 8 + 2 + 9 * 3 * 7) * (3 + 6 + 3 * 2 * 7 + 4) + 2 * (9 * 5) * 4 * 3) + 9 + (3 + 9 * 2 + 9 + (4 * 3) * (4 + 4 + 7 * 5 * 2 * 9)) * 4";
    "(8 + 8 + 3) * 7 + (7 * 7 + 7)";
    "9 + ((8 * 2 * 6 + 2 + 6) * 6 + 3 + 2 * 9) * 3 * ((7 * 4 + 6) * 5 * 6 + 4 * 5 + 5) + 2 + 2";
    "((3 * 3 * 5 + 7 + 5 + 8) + 7 + 2 * (4 + 9 * 8 + 7 * 2)) + 6 + 3 * 7 + 6 + 9";
    "(6 * 2 * 7) + (6 * 9 * 5 + 2 + (2 * 6 * 3) * 7) * (5 + 9 + 8 + 6 * 6) + 2";
    "2 * 4 * 8 + 9 + ((9 + 5) + 9 * 7) * (7 * 7 * (2 * 5 + 2 + 4 + 6) * 5)";
    "2 * 3 * 8 * (3 * 7 * 8 * 5) + 4";
    "6 + ((8 * 3) * 2 * (7 * 2 + 5 + 2) + (9 * 2) * (2 + 3 * 9) * (5 + 9)) * 2 + 9";
    "3 + 7 * 9 * 3 * (4 * 7 * 8 * 8 + 2)";
    "(5 + 2 * 6 + 4 * 7) * (4 * 5 + 4 * 3 * 9) * (9 * 7) + 3 + 7";
    "(5 + 6 + 8 + 8 * 2) * 2";
    "9 + 2 * 4 + (9 + 2 + 9 + 4)";
    "7 + 6 + (3 + 4 + 9 * 2 + (9 * 3 * 5 * 5 * 3)) * 5 + (8 + 6 * 8 * 4 + 5) * (3 + (6 + 7 + 5 + 4))";
    "6 + 3 + 2 * ((7 + 3 + 8) + 2 + (9 * 6 + 4) * 3) + 3";
    "8 + (3 + (7 + 7 + 5 + 3 + 7) * 9 + (4 + 6 + 4 + 6 + 3) + (9 + 3 + 8 * 6)) + 9 * (3 + 7 + 9 * (6 * 8) + 7) + (8 * 4)";
    "4 + 8 * 2 + (6 + 6 * (7 * 7 + 3 + 6 * 6) + (9 * 4 + 9 * 3 * 6 + 7) + 6) + ((3 * 5 * 6 * 8 + 3) * 3 * (5 + 2 + 5 + 9) + (8 * 5 + 5 + 6 + 6) * 5 + 2)";
    "9 + ((4 * 6 * 8 + 8 * 2 * 3) + 3)";
    "2 * ((6 + 4 + 3) * 8 + 2) * 9 + 6";
    "9 * (5 * 8 + 6) + 3 * 4 * 2 * 8";
    "2 + (2 + 8 * (3 + 6 + 7 * 5) + 2 + 3 + 2)";
    "8 * 8 + (3 + 7 + 2 * 3 * 3) * 6 + 7";
    "(4 * 6 * 4 * 4 * 4) * 6 * (2 * 2 + 7 * (5 + 9 + 2) + (3 * 6 + 6) + 7) + 5 + 7 + 8";
    "5 + (7 + 2 * 9) * (4 * 5 + 8 * 4 + 4) * 9 * 6";
    "5 + 7 * (4 * 7)";
    "4 + (8 * 6)";
    "9 + 3 * 6 + (7 * (4 + 9 + 2) * 5)";
    "5 + 4 * 6 + 2 + 8 + (7 + 5 + (6 * 8 + 2 * 3))";
    "5 + (6 + 9 + (5 * 4 + 5) + 3 * 6 + 6)";
    "6 + 5 + 5 + ((2 + 8 * 8 * 8) + (8 * 8) * (9 + 6 * 6 + 7 * 5) * 8 * 9) * 4 * 3";
    "((2 + 5 * 9) * 3 * 9 + (9 + 6 + 3) * 9) * 4 * 9 * 7 * 6";
    "5 + (2 + (3 * 4 * 4) * 5 + 4 * 9 * (5 + 7 * 3))";
    "3 + 4 + 6 + 5 + 4";
    "2 * 4 + 6";
    "2 + 2 + (7 * (5 + 3 * 5 * 3 + 8 * 7) * 7 + (8 * 7 * 7)) + (8 * 9 * 5) + 8";
    "3 * 8 + 5 + 4 * (3 + (9 + 4 + 3) + (7 + 6 * 4 + 9 + 9 + 7) + (9 * 4 + 7 + 7 * 9) * (5 * 7 * 3 * 7 + 9 + 2) + 4)";
    "5 + 6 + (8 * 4 * 7) + 5 * ((8 * 8 + 5 + 9 + 2 + 9) + 3 + 5 * 9) + (3 + (6 * 2 * 3 * 7) + 5 + 3 * 8)";
    "6 * 4 + 8 + (6 * 4 * 8 + 4) * 6 + 4";
    "2 * (9 + 9 + (3 + 2 + 6) * 7 + 5 * 4) + 2 + 7 * 7 * 2";
    "6 + 3 * 6 * 7 * (2 + (9 + 7 * 5 + 9 * 3 + 4) + (5 + 8 * 6) + 2 * (6 * 6 + 5 * 6) + 4) + 4";
    "(9 * 8 * 9 + 7 * 8 * 6) + 3";
    "(6 + 8 + 9) + 4 + (6 + (4 + 4 + 2 + 3 + 6 * 3) + (4 * 3 + 7 * 5 * 6) * 9 + 9) * 3";
    "(3 + 6) + (3 + 4) + 3 + 4 * 4 + 2";
    "((9 + 2 * 2) * 7 + 6) * 5 + 9 * 6 * (3 * 4 + 2 + (2 * 7) * 7 + 2) * ((4 + 3) + 8 + (4 + 2 * 2) + 8 + 8)";
    "2 + ((7 + 8) * 2 + 6 + 3 * 7 + 9)";
    "4 * (2 * (2 + 6 * 7 + 6) + (9 * 7 + 5 * 7 * 2))";
    "(4 * (3 + 9 + 2 * 7 * 7 * 5) + 7 + 7 * (8 * 2 + 7 * 4)) + 9 + 6";
    "((5 + 3 * 5 * 4) + 7 + 9 * 3 + 4 + 5) + 2";
    "4 * 3 + 2 * 4 * 7 * 3";
    "6 + ((2 + 5 * 6 * 6 * 9) + 7 * 8 + (8 * 4 + 7 * 3)) + 3 * 2";
    "5 * 4 * 9 + 2 * (2 * (8 + 5 + 7 + 3 * 8) + 4 * 3 * 9) * 9";
    "2 * 7 + ((4 * 7 + 6 * 2 + 8 + 9) + (6 + 2 * 8 + 5))";
    "(8 * 2 + 4 + (6 + 5 * 4) * 3 * 6) * 4";
    "((5 + 7 * 6) + 2 * 6 + 3) + 6 + 2 + 4 * 9";
    "((3 * 8 + 2) + 5 + (8 + 8 * 3 + 9 + 6 + 3)) * 3";
    "3 + 6 + 6 + (6 + 5 + 8) * (4 * 5 * 2 * 5)";
    "3 + (2 + 2 + 6 * 8 * 8) + (7 * 3 + 3 + 7 * 5 + 7) + (6 * 6 + 4 * 7 + 6)";
    "((4 + 6 * 7) * (5 * 4 + 4 + 4 + 2 + 8)) * 2 + (9 * (8 + 6 * 9)) + ((6 + 8 * 2) * 8 * 2)";
    "5 + 2 + (4 * 9 * 4 * 2 + 3 * 4) + 8";
    "((2 * 4) + (6 * 9) * 5) * 5 + 6";
    "((5 + 3) * (3 + 9 * 7) * 5 * 6 + 3) * 3";
    "3 + 4 * 5 + 6 * 7";
    "(8 + 4 * 6 + 7 * 6) + (2 * 3 * 3 * 2 * 3) * 2 * 3 + 9 * 5";
    "((6 + 9 + 4 + 9 * 7) + (3 + 4) + 7 + 2 + (3 * 9 + 4 * 5 + 9) * 4) * 4 + 7";
    "8 * 6 * 9 + (9 + 3 + (3 + 5 * 8 + 7 * 9) * 5 * (4 + 6 * 9 + 3) + 6) + 4 + 6";
    "9 * 2 * ((6 * 3 + 6) + 5) + (5 + 8 * 9 + 5 + (8 * 6))";
    "((9 * 7 * 4 * 7 + 3 + 7) + 4 + 5) * 8 + 6 + 3 * 4 + ((9 * 7 * 8 * 3 * 8) + 3 + 5 * 6 + 2)";
    "9 + (8 + 2 * 9 + 8) * (8 * 5 * 4 + 6 + 2 * (4 + 9 * 4 + 5))";
    "3 + 7 * 5 * 4";
    "(8 * (9 + 5 * 6) * (9 + 6 * 9 + 7 + 5) + 7 + 4 * 6) * 4";
    "(4 * (5 * 5 * 5 * 7) + 3) * (6 * 3) + 3 + 4";
    "3 + ((7 + 2 + 4) + 9 + 4) * (2 * 9 + 4 * 3 * 6) + 8 * 9 + 8";
    "3 * (7 * 9 * 5 + 2 * 5 * (5 + 5)) + 8 * 5";
    "5 * ((2 + 7 + 8 * 9) + (3 + 4 + 6 + 4 + 4 * 4) * 4 + (5 * 8 + 3) * 3 * (9 + 9 + 6 * 5 + 6)) * 5";
    "(5 * 7 + 2 + 8) + 8";
    "(4 + 6 * (2 + 8 + 5 * 6 + 7 + 4) * 3 + (6 + 4 + 7)) + (6 + 5 * 6) * 2 + (3 * 2 + 2 + 5 + 9 * 8)";
    "5 * 2 + ((2 * 2 * 2 + 6) * (2 * 3 * 3 + 6 + 9 + 6) * 8 * 8) * (8 + 5 * 4 + 9) + 2 * 4";
    "4 * (6 + 9) + 8 + 3 + (5 + 2 + 8) + 5";
    "9 * 6 * 6 + 5 * 7";
    "(2 * (6 * 9 * 8 + 3) + 3 * 3) * 3 + 8 * 7";
    "(3 * 7 * (9 * 2 + 4 + 5 * 4) + 2) + 3 + 3 + 7 * 8";
    "8 * (9 * (7 * 9) + 2 + 2 * 9 * 9) + ((5 + 5 + 9 * 2 * 6 + 3) + 9 * 6)";
    "(9 + 8 + 5) + 5 + 9 + 4 * 5";
    "8 + (7 * 6 * 5 + 3 * (8 * 5 + 9)) * 9 + 2 + 3 + 5";
    "(9 * 9 * 2 + (2 + 9 + 3 + 7) + 5) * 4 + 4 * (4 * 9 * 2 * 6) * 7";
    "7 * 9 * (4 + 9 + 7 + 9 + 3 + 5) + 4 * (3 + 6) * 4";
    "5 + ((3 + 6) * 8) * 2";
    "7 + (2 * 3 * 5 + 8) + ((7 * 4 * 9 + 4 * 6 * 2) * 2) * 3 + 2";
    "8 + (3 + 6 + (4 * 7 * 9 + 2 + 2)) * 6 + 4 * 4 + 9";
    "(4 * (3 + 2 * 6 * 3 + 5) * 4 + 9 + 8) + 7 * 7";
    "(8 + 7 * 9) + 7 + (4 * (7 * 2 * 7) * 2) + (6 + 8 * (3 * 7 + 3 + 3 * 2 * 2) + (8 * 4 * 6 + 3))";
    "9 + 3 + ((7 + 4 * 3 + 6 + 4) * 6 * 2 + 7 * 4) * 5";
    "((3 + 7) + 4) + 3 * 5 + (3 + 7 * 9 + 6 * 3 * 2)";
    "7 + (4 + 4 + 9 * 5)";
    "((5 + 3 * 7) + 6 + 8 + 2) + 3 * 8 * (3 + 9 * 6 + 4)";
    "3 + 8 + 7 + ((3 * 8 + 7 * 4 * 5) + 3 * 8 * 9 * 4 + 3) * 7";
    "5 * 3 * ((7 + 3 + 7 * 5 + 3 + 4) * (8 + 8 + 3 + 7 * 8 + 6)) * 6 + 4";
    "(4 * (6 + 3 * 7 * 4) + 7 * 8) + 8";
    "6 * (8 + 6 + 5 * 4) + 3 + ((3 * 6 * 4 * 2 * 6) * 8) * 9 + 6";
    "(4 * (9 + 9 + 9 * 7 * 8 + 9) * (3 * 5 + 8 * 4 * 3) + 2 + 9 + 4) + (7 + 5 + (9 + 3 + 8) * (9 * 7 * 5 * 4) * 5) + 2 + 2 * 5 + (2 + 5 + 9 + (2 + 8 * 5 + 5 * 2 * 7) * 2 + (6 + 3 * 8 + 2 * 6))";
    "(4 * (7 * 3) + (6 + 3) * 6 + 6) + (6 * (8 + 2 + 8 * 4 * 7 * 5) + 7 + (5 * 9 * 5 + 9 * 2) * 7 + 8) * 5 + 2 + 6 * 4";
    "6 * 9 + 8 * (7 * 4 + 5) + 6 * (5 * 8 * 4 * 2 + (3 * 6) + 6)";
    "6 * 3 * (4 * 2) * 5";
    "7 + 6 + (4 * 9 * 3 + 2 * 9 + 6) * 4 + 7 * 7";
    "(2 + (2 * 7 + 9 + 4)) * 9 * 8 * (3 + 9 * 6 * 9) * 4 * 9";
    "(8 * 6 + (3 + 8 * 5 + 6 + 9) * 7 + 6 * 7) + 6 + 4 + 8 * 3";
    "(4 * (7 * 9 + 5 + 7 + 2 + 7)) * (6 * (2 * 2) + 9 * 4 + 5) + (3 * 3 + 4 * (2 * 7 + 4) + 3) * 5 * 6 + 9";
    "2 + (7 + 7) + 9 + ((9 * 2 + 2 * 8 * 5) + (2 + 3 * 2 + 8 + 9) * 3 + 7 * 4 + 2) + 3";
    "((7 + 7 + 6) + 6 + 8 + (4 + 4 + 6 * 5 * 3 * 7)) + 6 * 7 * 9";
    "2 * 9 + 9 * 6 * 2 + (8 * (3 * 3 * 7 * 6) * 4)";
    "4 * (9 * 2 * 8 + 3 * 5) + 7";
    "9 + 3 + 9 + 9 + 2 + (5 + 9 * 3 * 2 + 3)";
    "6 + 7 + (2 + 5 + 2 + 8 * 4 * 8)";
    "(9 + 7 * 3) + 4 * 4";
    "6 * 7 + 9 * (8 + 7 * 4) * 8";
    "(8 * 5) * 6 + 8 + (4 * 5) * 6";
    "2 * 8 * 7 + (8 * (4 * 2 * 2 * 9 + 9) + (5 * 7 * 5 + 7)) * 8 + 5";
    "5 * (5 * 8) + 8 + (9 * 8 * 2) * (5 + 4 * 3) * (4 * 7 * 6 + 2 + 4)";
    "3 + 6 * 8 + (5 * (6 * 3) * 9 + 5 + 4 * 8)";
    "7 * 2";
    "8 * (7 + (7 * 8))";
    "4 * ((8 * 2 + 2) + (9 * 5 * 2 + 3 + 6) * 6 * (3 + 5)) * 6 + 7 * 3 + 7";
    "4 * 6 + 7 * ((3 * 5 * 4) * 7) * (2 + (7 * 3 * 4) * (5 + 3 + 6 * 8 + 7 + 4) * (5 + 7 + 7 + 3 * 3)) * 2";
    "(8 * 8 + 2 * 4 * 7) + 9 * 8 * 6 + (8 * 4 * 2)";
    "(4 * 8 + (6 * 7 + 5 + 7 + 4) + 8 + (9 + 3 * 8 + 8 + 6 + 9) * 3) * (4 * 4 + (6 * 7 + 7 * 9 + 9)) + 8";
    "3 + (9 * 8 * 4 * 9 + 8 * 7) * 9 * 2";
    "6 + 4 * (8 + (6 * 8) * 7 * 5) + 9 + 4";
    "(8 + 9 * (4 + 3 + 6 + 2 + 5 + 8) + 6) + 7 + 9 * 3 * ((7 * 8 * 6 * 5 + 4) + 7 * (9 + 2 + 9 + 8 * 4) + 8 * 4 + (8 * 8 * 2 + 9 * 4)) + 6";
    "(9 * 8 + 4 * (6 + 9 * 3 * 3 + 3 * 4) * 8 + 7) + 5 * (4 * 8 * (2 * 3 + 2) + 3 + 5 + 2) + ((2 * 6) * 8 + 6 * 4 + 8) + 6 + 9";
    "((9 + 3 + 9 + 7) + 3) + 7 * ((8 + 6 * 7 * 4 * 7) * 8 * 8 + 2 + 6) + 3 * 8 * 4";
    "(5 + 3 * 2) + ((4 + 3 * 5 * 5) + 6 + 7) + 7 * 7 + 8";
    "4 + (9 + 4 + (9 * 7 * 8) + 5 + (5 + 7 * 5 * 8) + 8) + (6 + 5 * 5 + 7 + 9 * 8) * 9 + (4 + 4 * 8) + (5 + 4)";
    "3 * (3 * (6 + 5 * 5 + 4 + 9 + 9) * 8 + (6 * 3 * 2 * 5)) * (6 + 2) * (4 * 6 * 8 * 5 * 5 * 2)";
    "4 + 7 * (6 + 2 * 3) + 9 * (3 * 3 + 8 + 5 * (8 * 7 + 3 * 5) + 8)";
    "5 * (2 + 9 + 9 + 8 + 4 * (7 + 2 + 9 + 2 * 6 + 8)) + 2";
    "5 + (7 * 8 + 8 + 7 + 3) * 2 + 2";
    "3 + 8 * 8 * (9 * (7 + 5 * 5 * 7) * 6) * 2";
    "6 + 8 + (3 + (5 * 8 * 6 + 4 + 3 + 4) + (2 * 7 + 4 * 4) + 5) * (4 + 8 * 6 + (9 * 6 + 7 * 3) * 9 * 3)";
    "4 + 8 * (2 * 9 * 6 + (4 + 9) + 8) * 9 + 6";
    "5 * 3 * (3 + 7 * 7 * 3 * (6 + 5 * 7)) + 8 * 9";
    "(2 + 8 + (6 * 8 + 5 * 5 * 2)) + 5 * (6 * 5 * 6)";
    "4 * 5 + (7 * 4 * 3 + 7 * 7) * 8 + ((9 + 9 + 5 * 3 + 2) + (2 * 7 * 8 + 3) + 7 * 2 + (5 + 8 + 8))";
    "7 * (4 * 2 * (8 * 8 * 7) * 3 * 9 * (2 * 4 * 3 + 2))";
    "6 * 7 + 8 * 8 * (8 + 2 * 5 + 8 * 6 * (4 + 8 + 3 + 3 * 7)) + 6";
    "8 + 2 * 2 + (7 + 8 + 5) * (6 + 9 * (4 * 6) + 3 + 8 * 7)";
    "5 * ((3 + 8 + 4 * 4) * (4 * 5 * 8 * 8 + 8 + 8) + (8 + 7 * 9) + (6 + 5) + 2 * 9) * (7 + 8 * 7 * 4)";
    "(3 + 7) + 9";
    "9 * 5 + 7 * (3 + (6 + 3)) + 5 * 8";
    "2 + 6 * 5 + 6 + ((8 * 8 * 9 * 4 * 9 + 6) * 4 + 4 * 2)";
    "3 * 2 * (6 * 8) * 8 * (2 * 8 * 8 + (4 + 6 * 2 * 4)) * 5";
    "4 * (8 + 7 + 7 * 8 + (7 + 5)) + 6 + 8 + 7";
    "(5 + 4 + (7 * 7) * 2 * 4 + 3) + (8 * (6 + 6 * 9 + 7 * 7 * 3) * 2) * 3 + 5 + 9 + 7";
    "8 + (8 * (5 + 3 * 7 * 6 * 7) * 9 * 9 + 7) * 8 * 4";
    "7 * (6 * 8 * (6 * 3 + 9 + 8 + 8) + 7) + 7 * 7 * 3 + 4";
    "2 + (9 * 4 * (9 + 7 + 6) + 3 * 8 + 7) + 7 * 2 + (4 + (7 + 2 + 9 + 9 + 7 + 2) + (9 * 3 + 4 + 4 + 3 + 8))";
    "(4 + 4 * (4 + 7 + 3 + 3 * 9 + 8) + 3) * 7 * (7 * 6 + 9) + 4 * 4 + 5";
    "8 + 6 * 8 * 5 + (7 * (4 + 9 + 3 * 6 + 8) + (7 * 9 * 2 + 3 * 2 + 8) * 6 + (4 + 7 + 4))";
    "(3 * (4 * 7 * 3 * 8) * (6 + 7 + 6 * 7 + 7 * 2) * 8 + 5 * 7) + (9 + 8 + 7 + 5 + 6 * 7) * 5 * 4 * 5";
    "3 + 3 * 2 + ((2 * 3 + 2 + 6 * 6) * 6) * 8 * (3 + 7 * 8 + 6 + 3 + 8)";
    "(5 * 4) * ((3 * 2 + 9 * 4 + 5 + 7) + (7 * 3 * 7 + 9 * 7 * 5) * 7 + 4 + 6)";
    "3 + 2 + 5 * 7 * 9 + 2";
    "(4 + 6 * 3 + 3 * (6 * 3 + 5) * (6 * 3 + 5)) + 2";
    "5 + 8 + 6 * 3 + 3 * 2";
    "(8 + 7 * 4) + 7 + 3 + 4";
    "(3 + 3 * 9 + 7 * 7 + 3) + 6 + 5 * (2 + (4 * 2 * 2 + 9 + 6) * 2) * 6 + (7 + 2 + 7)";
    "9 * 2 * (3 + (8 + 7 * 5 + 3)) + ((9 + 3 + 6 + 7) * 9 * 8 + 5 * 6) + 5";
    "(6 * 4) * 7 + 4 + 3 + 5 * 4";
    "8 * 2 + (6 * 4 + 3 + 6)";
    "(4 + 5 * 2 + 9 * 9 * 6) * 8 * 7 * ((4 * 3 * 3) + 5 * 6 * 2) + 9";
    "(8 * 5 * (5 * 7 * 5 + 4 + 5) * 2 + 9 * 6) + 4 + 6";
    "2 * 5 + ((2 + 8) + 3) * 5 + 7";
    "5 + ((8 + 2 * 6) + (2 * 5 + 6 + 4 * 8 * 7) + 3 + 7 + 8)";
    "6 * 2 * (6 + 8 * (3 + 7 * 5) * 2 * 7) + 8";
    "2 + 2 + ((8 + 2) * 8 * 8)";
    "3 + 7 + ((8 * 2 + 3) * 9 + 2 * 4) + (9 * 9 * (3 + 7 + 3 + 5 + 4) + (8 * 5 + 4) + 9 + 7)";
    "3 * 5 + ((4 * 8 + 8 + 7) + 8 * (3 * 3 * 7 + 9 * 6 + 3) + (9 + 2 + 3 * 9 * 8)) * ((7 * 8) + 9 + 2 + 9 * 2)";
    "(7 + 9 + (2 + 8 + 7 * 7 + 4) + 9 + 6 + 7) + 6";
    "2 + ((2 * 9 * 7 + 4) + 3) + 3 * (8 * (9 * 4 + 7 * 3 + 3) + 8 + 5 + 7) * (9 + 9 * 5 + (8 + 9) + 2 + 5)";
    "8 + (3 + 5 + 9 * 7) + (7 * (9 + 8) + 8 + (9 * 7 + 8 + 6 + 8)) * 2";
    "(3 * (6 + 6 * 6 + 2) * 9 + 5 + 6) + 8";
    "6 * 5 + ((9 + 5 + 5) + (6 * 5 * 7 * 7) + 7 * (9 * 7 * 4 + 6)) + 7";
    "2 + 7 * 7 + 2 * ((5 * 8 + 9 + 9 + 8) * 9)";
    "((2 * 8 * 4 + 2) + 3) * 4 + 9 + 3 + (7 * 7 * 4 + 2 * 2) * 3";
    "6 * 8 + ((3 + 6 + 4 * 3) + 6) * 3 + 9";
    "(5 + 2 * 3 * 4) * 3 + 7 + 7";
    "((7 + 4 * 7 + 7 * 9 * 8) * 3 + 9) * (7 * 2 + 9 * 9 * 8) + 5 + 8 + 6";
    "6 + (2 + (9 * 6) * 4 + 5 + 5) + (5 * 2 + 6 * (2 + 2) + 6 + 9) + 5";
    "6 * 3 * (6 + 5 + 4 * 8 + (9 + 2 * 4 * 5 + 4 + 7)) + 5";
    "9 + (2 + 3) * (6 + 5 * 5 * 2 * (3 * 6)) + 6 + 8 + (4 + 8 * 9)";
    "((7 * 5 * 5 + 9 + 3) * (7 + 7) + (2 + 6 + 6 * 3 + 7) + 5) + 6";
    "8 + 2 * 9 + 3 + 4";
    "(7 * 8 * 4 * 9 + (9 * 9)) * 4 + (4 + (7 * 3 + 6) + 2 + 4 + 9 * 5) + 9";
    "(4 + 5) * 8 * (5 * 5) * 4 * 8";
    "(4 + (5 + 4)) * 7 * 4 + 9";
    "3 + 8 * (3 * (5 * 2 + 6) * 9 + (4 * 2 + 6 + 7) + (9 + 9 * 8)) + 5 + ((2 + 7 + 8 + 8) * (7 + 8 + 3 * 9)) * 9";
    "8 * 9 + ((8 * 7 + 4 * 5 + 8 + 4) + (3 + 8 * 4) + 8 * 3 + 3)";
    "6 + (6 + (2 * 5 + 2 * 8)) * 6 + 8 + 4";
    "((9 * 5 * 5 + 8) * 9 * 2 * 6 + 3) + 6 + 6 * 6 * ((5 + 3 * 2 + 4) + 8 + 8 + 6 * 4)";
    "((5 * 3) + 6 + 5 * 5) * (6 * 8) + 3";
    "((9 * 5 + 6 + 2 * 5 + 3) * 6 * 6 * 7 * 2 * 2) + 6 * 8";
    "2 + 9 + 3 + 5";
    "5 + 4 + 3 + 4";
    "6 + (5 * 2 + 8 * 4 + 9)";
    "(7 * 5 * 3 * 9 * 9) + 6 + 5";
    "8 * 8 + (8 + 9 + 5 * 4) + 3 + (5 + 2 + 6 + 6) + 9";
    "9 + ((7 * 2 + 7 * 4 + 9) * 8 + 5 + 6 * 3 * (8 + 4)) * 2";
    "5 * 8 * ((9 * 5) * 4 * 7 + 2 + (4 + 4 * 3 * 5) * 7) * 4 * 8";
    "4 * 9 * (3 + 4 + 9 * 7) + 2 + (5 + 6) + ((6 * 2 * 8) + 9 + 5 + 2)";
    "6 + 7 + (4 * (5 * 7 + 9) * 2 + (5 * 3 * 7))";
    "(9 * (9 * 3) + 9 + (3 + 2) * 6 + (4 + 4 + 9 + 4)) + 7 + 8 * (6 + 8 + (6 * 9 * 2 * 8)) * (8 + 6) + (8 * 6 + 2 * 7)";
    "5 * ((4 + 2) * 2 * (2 + 9 + 2 * 4 * 3 * 4) * 4 + 8 + 3)";
    "8 + 6 * (7 * 6 + 9 + 3 + 6)";
    "(5 * (8 * 7 + 4) + 3) + 2 * 5 * 4";
    "9 + (2 * 3) + 3";
    "4 + 5 + 6 + 8 + 4 * 9";
    "(3 * 3 + 4 * 4) * (4 + 7 + 6 * 6)";
    "3 + 9 + (5 * 8 + 7 * (3 * 5 * 8 * 9 + 7 + 6) + 8)";
    "7 + (8 + 5 * 9 + 6 * 3 + (9 + 3 * 7 * 5 + 3 * 2)) * 7 + 5";
    "4 * 6 + 3 * (5 + (6 + 4 + 9) * 6) + 2";
    "2 * 3 + 8 + 9 * 6 + (2 + 3 + 5)";
    "8 + ((3 * 4 * 7 * 2) + 4 + 5 + 2) * 9";
    "7 * 4 + 2 * 4 + 9 + (3 * 7 + 2 * 6 * (8 + 9 * 9) * 5)";
    "4 * 3 * (7 * (8 * 5 * 8 + 3 + 9) * 3 * (4 * 8) + 4 + (9 * 3 + 9 + 6 * 4 + 9))";
    "7 * 6 * 7 * (3 + 4 * 3) * (5 + 5 + 2) * 7";
    "2 + 6 * ((4 * 3 + 6) * 5 * 8 + 4 * 2 + 9) + 6";
    "6 + 4 + (5 * 5 + 7) * 8";
    "(5 * 3 * 8) * (6 * 6)";
    "5 * (6 * 5) + 9 + 7 + (6 + 6)";
    "((3 + 6 * 6 * 5 + 3) + (6 * 3 + 8 + 8 + 7) * 2 * (3 * 5 + 3)) + 3 * ((6 * 6) + 2 + 4) + 3 + 5 * 5";
    "9 * (2 * 6 * 4 + 7 + 5 + (8 + 4 + 7 * 2)) + 5 + (3 * (4 * 5 * 6 + 6 + 4 * 4) * 5 + 8)";
    "8 + 3";
    "3 + (2 + 4 * (7 * 4 + 9 * 9) + 2 + 3) + 6";
    "((5 + 9 * 6 + 3) + 2) + 5 * 2";
    "3 + 8 * 2 * 4 + (2 + 3 + (3 + 9 * 6)) + 5";
    "6 + 5 * ((9 * 9) * 9 + 4 + (8 + 3) * 8 * 5) + (8 * 8 + 2 + (5 * 6 * 5 * 3 + 9 + 7) + 5) * 5 * 5";
    "(6 * (5 * 3 + 9) * 3 * (7 + 4 + 8 + 3 + 8 + 6) * 5) + 3 + 7 * 2 * 9";
    "6 + 3 + (2 * 2 + 9 + (4 * 4 * 2 + 3 * 4 * 9)) + 9 + 8 * (7 * 2)";
    "((2 + 7 * 8) * 8 + 7 + 3 + 8) * 4 * 9";
    "9 + 9 * 5 + 7 + ((9 * 9 * 4 + 4 + 3 * 7) * 5 * 5)";
    "(6 * 7 + 3 + 4 + (7 + 9 + 3 + 2)) + 3 + 6 * 9 + 8 * 7";
    "((2 + 5) + (8 + 8 * 8 * 2 * 4 * 9) + 3 + 5) + 3 + 8";
    "4 * 4";
    "6 * 8 + (9 + 2 + 4 + 3 + 2 + (8 * 2 + 3 + 2 + 9)) + 8 + 3";
    "7 + 2 + (2 * (7 + 2 + 9 * 3 * 5 * 8)) + 4 + 5 * 4";
    "4 * 6 * 8";
    "5 * 4 + 4 + 2";
    "6 + 3 * (8 * 4 + (5 * 6 + 2))";
    "2 * (2 + (2 * 9) + 7 + 9) + 6 * 7";
    "6 * 3 * ((2 * 5) * 3 * 5 * 2) + ((2 * 8 * 7 + 9) * 3 + 5 + 2)";
    "(2 + 3 + 9 + 9 * 7) + (8 * 8 + 2 * 7 * 3) + 3 + ((5 * 5 + 4) * 2 * (3 + 8 * 6 + 2)) + 5";
    "6 + ((3 + 8 * 3 * 9 * 7 + 3) + 2 * 3) * 4 * 9 + (3 + 2 * 7)";
    "((2 * 4 * 4) * (2 + 5 * 4) * (9 * 7 + 3 + 9)) + 7 + 7 + 8 * 4 * (5 * (4 * 9) + 4 * (7 + 9 * 9 * 2 * 9) + 3)";
    "2 + 2 + ((2 + 5 + 7) * 8 + 3) + 5";
    "3 + ((6 + 4 + 9 + 9 + 5 + 6) + (6 + 7 + 3 * 2 * 8 + 3) + 9 + (3 * 2 * 9) + 9 * 3) + 9 * ((6 * 7 * 9 + 9) + 3 * 3 + 7)";
    "4 * 9 * 4 * 7 * (4 + 4) + 3";
    "2 * (7 * 5) * 2 + ((8 + 2 + 6 * 4 + 6 * 4) * 4)";
    "6 * (2 * 8 * 4 + 6) * 7";
    "2 * 3 + 7";
    "(7 + 8 * (8 * 6 * 4) * 5) + (9 + 9 * 3) * 2 * 9";
    "4 + 3 * (5 + 5 * 9) * 9 * 2 + 8";
    "8 * (2 + (5 * 8 * 3 * 8 + 7) + 3 + 7)";
    "(2 + 2 * 2) * 2";
    "(4 + 2 * (8 + 4)) + 2 * 8 * (6 + 7 * 9 * (3 * 2 + 3) + 7 * 9) * 3";
    "(9 + (5 + 2) + 7 + 6) * (9 * 4 * (4 + 7 * 7 + 6 + 5) * 7) + 7 * 7";
    "2 * (3 * 7 * 7 + 7) * (6 + 2 * 6) + (9 * (4 + 2 + 9 * 8) * 9 + 7 + 7)";
    "(6 + 7 + 8 * (6 * 9 + 2) + 5 * 3) * 4 * (6 * 8 * 5 + 7 * 3) + (8 + 2 + 8 + 2 + 8) * 5 * (6 + 9 + 7 * 8)";
    "2 * 8 * (6 * (4 + 5 * 2) + (3 * 4 * 2 * 3 + 7) * 7 * 5)";
    "3 + (9 + 3 * 7 + (8 + 4 + 2) + 3) * 4";
    "9 * (8 * (3 * 7 + 2) + (8 * 3 + 7 + 3 * 4 * 2) + 2 * 2 + 8) * 4 + 2";
    "7 * 3 * 6 + (7 + 5)";
    "(8 * 7 * (3 * 2 * 9 * 8)) + ((4 * 3 + 7 + 8) + (6 * 8) + 3 + (5 * 9 + 8 + 7 + 5) * 8 + 5) * 9 + 5 + (4 + (9 * 9) + 5 * 3 * (4 * 2)) * 8";
    "((3 + 8) + 6 * 5 * 6 * 5 * (4 + 8 * 9 * 5 * 9 + 9)) * 9 * 3 + (6 * 3)";
    "(6 + 5 * 2 + 5 + 9) + 4 * (9 * 6 * 5) + 6 * 9";
    "((7 + 5) * 2) + 7 * (4 + 4) * 9";
    "(5 + (5 + 2 * 5 * 6)) * 2 + 4";
    "8 + (3 * 4 * 9 + (6 + 3 * 5 * 2) * 9 * 9)";
    "3 * 5 + 2 + 2 * 9 + (4 + 6 * 9 * 3)";
    "4 * 6 * ((5 * 7 * 8) + 6) * 9";
    "3 * 8 + (8 + 6 + (9 * 4 + 5 + 4)) * 9 + 9 * 7";
    "(6 * 2 + 3 * 8 * 4 * 2) * (3 * 2 + 8 + (8 * 9 + 9 * 2 * 2) * 8) * 2 * 3";
    "8 * 4 + 4 + 2 + (4 * (6 + 2 + 8 + 6 * 6) * (5 + 6 + 9 + 2 * 2) * (3 + 7 + 8 + 6 * 8) * 5 * 7) + 3";
    "(2 * 5) + ((7 + 6) + 9 * 7 * (7 + 5 * 6 + 3 + 9)) * 4";
    "2 * ((4 + 2 + 6 * 5 * 9) + 4)";
    "(5 * 9 * 2 + 5 + (4 + 9 * 4 + 8) + 2) + 8 * 3";
    "4 * ((6 + 7 * 3 * 9 * 8) + 5 * 2) * 2 + (6 + (9 + 5 + 3 + 7 * 5) * 2 * 2 + (9 * 8 + 7 + 7 * 6)) * (4 * 7)";
    "2 + 9 * 6 + 6 + (4 * 5 + 3 * (2 * 2 * 4 * 5 + 7 + 6) + 7 * 5)";
    "7 + ((9 * 4 + 7 + 9) + (4 + 6 * 7 + 4)) * 5 + ((9 + 8 * 5 * 9 * 9) * 9 + (3 * 2 * 6) * 2 * 6 + (3 + 7))";
    "(9 * 5 * 9) + (3 * 9 + 2) * (2 * 6 * 7 * (6 + 3) * 6 + 4) + 3 + 8";
    "(8 * (8 * 3 * 2)) * (4 + 5) * 7 * 3";
    "7 + 7 + ((2 * 2) * 7 + 4 + 7 * 9)";
    "(6 + 5 + 9) * 6 + 2 * 9 * 9 + 3";
    "4 + 2 + (3 * (4 + 7 * 6 * 7 + 3 + 3) + 7) * (2 + 2 + 7 * (6 + 2 + 8 + 3 * 8 * 4) + (8 + 2)) + (7 * 8)";
    "(4 + 7 + (3 * 2 + 9 + 5)) + 9 + 6 * 7 * 2 + (5 + 5 * 3 + 7 + 9 + 9)";
    "6 * 9 * 7 * (3 + 5 + 2 * 4 + 6 + 6)";
    "(5 * 3 * (6 + 8 + 9 * 6)) * 8";
    "(6 * 5) + (7 + 4) * (4 + 9 + 4 + (2 * 3) * 7)";
    "4 + 6 * 5 * (2 * 2 * 2 + 3 + 6 * 4) + 7 * 9";
    "9 * 5 * (8 * 9 * 6 + 5 * (3 * 5 + 9 + 9 + 6) + 5)";
    "3 * (9 + 7 * 2) * 6";
    "5 + 9 + 6";
    "6 + (7 * 5 * 9 + 3 + (6 * 3 + 8 + 4 * 9)) + 3 * 5 + 3";
    "7 + 5 * ((2 * 4 * 4) + 3 + 4)";
    "(7 * 8 + 2 + 8 * 4) + (7 + 3) + 7 + 7 * 6 + 3";
    "(8 + 6 + 5 + 5 * (5 + 3 * 3)) * (8 * (5 + 9) * 4) + 5 + 7 + ((8 + 8) * 3 * 9 * 9 * 6 + 2)";
    "(8 * 2 * 5 + (8 * 8 * 2)) * 4 * 2 + 3 * 2";
    "5 + 4 * 2 * 9 + (6 * 3)";
    "2 + 9 * ((5 + 3) * 3 * 9 + (6 + 4) * 6) + 9 * 7 * 4";
    "6 + 5 + 6 * 9 + (2 + 3 + 9) + ((4 + 7) * 6 * (7 + 2 * 3) * 2 * (7 * 2 + 3 + 7 * 9))";
    "2 + 7 * (6 * (9 * 6 + 2 * 3 * 7 + 5) + 9 * 2 * 5) * (4 * 5) * 5";
    "(8 + 7 * 3) + 6 + 7 * 6 + (5 + 2 * 5 * 2 * 6 + 7) * (7 * (4 + 8 + 7 + 6 + 2 * 2) * 8)";
    "(8 * 2) * 3 * 4";
    "2 * 7 + (8 + 7 + 8)";
    "((5 * 8) * 3 + 8 + 7) * 3 * 5";
    "((3 * 4 * 6 * 8 + 6) * 6 + (4 * 9 * 9 * 7 * 6) * 6 + 8) * 7 + 9 * 2";
    "(3 * 9 * 2 + 6 * 7 * (3 + 7 + 9 + 4 * 3)) * 2 * 8 * 9 * (2 + 3 * 7 * 9)";
    "(6 * 8 + 6 + 2) * 7 + 8";
    "7 * (9 * 2 + (2 + 6 * 2 * 5 * 8)) * 3 + 8";
    "7 * 2 * 6 + 6 * 2 * 8";
    "5 + 8 + (4 + 9 + 8 + (9 + 8 + 6 + 4) * 3 * 6)";
    "(3 + (7 + 9 + 4 + 5 * 6 * 7) + (6 + 4 + 3 * 7 * 2)) * 2 + 3";
    "6 + 7 + (6 * 6 + (4 * 5 * 5 + 3 + 6 + 4) + 3 + 9)";
    "5 * 2 + 6 * 6 * (2 * 8 * 8 * 2 * 2 + 2)";
    "5 + 7 * 8 + (7 * 4) * 4";
    "9 * 8 + 9 + (4 * 6 + (8 + 2 + 4 * 7 + 3) * 4 * (2 * 8 * 5 * 3))";
    "5 * 6 + 6 * 7 + (5 * 8 * 2 * 2)";
    "3 + 8 * 6 + 7 * 7 + ((6 * 5) + 6 + (7 * 9) + 3 + (3 * 2 + 5))";
    "8 + (9 + (6 + 5 * 6))";
    "3 + (9 * 7 + 6 * 6 * 9 * 2) + 7 * 7 + 8";
    "6 + 3 + 4 * 2 + 9 * (9 * 6 * 6 + 7 + 7 + (4 + 7 + 8 * 4 + 6))";
    "6 + (6 * 4 * 5 + 3 * 9 * (6 + 8 * 6 + 4 * 7 * 3))";
    "9 * (3 + 9 * 7)";
    "7 + 3 + 3 + 9";
    "7 * 3 * ((6 + 8) + 5 * 4 + 8 * 9 * (9 * 3)) + 9";
    "7 + 3 * (2 + 2 + (5 * 7 + 9 * 4 + 4) * 5) + 4 * 2 * 2";
    "(4 + 2 * (4 * 8)) + ((5 + 9 * 8 + 8 + 8 + 4) * 8 + 9) * 5";
    "2 * (4 + 9 + 8) + 8 * 3 * 8";
    "((5 + 5) * 5 * 7 + 9 * 3 * 9) + 9 * 6 + 9";
    "(7 * 4 * 6 * 9 + 4) * (9 * 2 * (7 * 4 * 7) * (7 + 8 * 6 * 8 * 3 * 7)) + 3 + 3 + 2";
    "(5 * 7 + 6 * 4 * 7 + (9 + 2 * 2)) * 7 * 3";
    "3 * 3 + ((2 * 9 + 5 * 3) + 8 + 5 + 9) + 2 + 8 + (9 + 9 * 4)";
    "((7 + 3) * 9 * 3 + 9 + 4 + 9) * ((5 + 4 + 2 + 2 + 2) + 6 * 3 * 8)";
    "8 + 9 * 5 + (9 + 2 + (3 * 6) * 2 * 4 + 3) * 5 + 8";
    "(9 * (5 * 3) + 8) + (2 + (9 * 6 + 8 * 6 + 8) * 5 + 6 + 5 * 7) + 7 + 2 + 8";
    "8 * 8 + 6 + (4 + (7 + 6 * 8 + 7 + 8 * 7) + (9 * 3 * 5 * 4 + 3) * 7 * 9 + 8) + 7";
    "2 * 8 * 4 * 5 + (8 * 4 * 6)";
    "5 * (3 * 4) + 8 * 5";
    "9 * (6 + 4 + 9 + (6 * 3 + 4 * 4 * 9 + 9)) * 9";
    "4 + 3 + (3 + 6) + ((5 * 6 * 6 * 9) * (6 + 2) + 6)";
    "5 + 3 + 3 + (7 * 3 * 5 + 5 * 3) + 9";
    "(2 + 6 + 8 + 3) * (9 + 7) * 6";
    "(6 + 7) * 9 * 8 + 3 + (3 * 7) * (3 * 4 * 6 + (6 * 6) * (8 * 6 + 7 * 8))";
    "9 + (7 + 5 + 3 * 5) + 7 + 6";
    "(7 * 3 + 9 * 2 + 5 * 8) * 9 + 3 * 9 * 9";
    "5 * 6 * 2";
    "5 * 2 + 7 * (8 * 3 + 4 * (7 * 9 + 2)) * (4 + 2 * (8 * 5 * 5 * 9 * 3) * 5 * 4 + 6)";
    "4 * ((3 + 3) * (5 * 7 * 2 * 4) + (9 * 5 + 9 + 3 + 5 * 6) * 6 + 7) + 3";
    "6 + 7";
    "3 + 4 * ((5 + 7 + 4 + 2 * 6 + 2) + 6 * 7)";
    "(4 + 6 * 2 + 8 + 5 * 5) + 9 * 5 + 2";
    "2 * 8 * (7 + 6 + (9 + 2 * 8 + 7)) * ((3 * 5 + 6 + 4 + 5 * 3) + 6 * 8 + 9 + (8 + 9 * 6 * 4) + (5 + 4 + 3 * 2 + 9)) + 6";
    "3 + 7 + 3 + ((7 * 9) * 9) * 3";
    "6 * 4 * 3 * 7 + (4 * 2 * 2 + (6 + 9 * 6))";
    "((8 + 6 + 2 + 3 + 7 + 2) * (7 * 2) + 6) * 8 * 4";
    "6 + 7 * 4 * 4 * (8 + 5 + 8 + 9 * 9) * 7";
    "(5 + 9) * (4 * 8 * (4 + 9 * 4) * 4 + 3) + 6 * 5 + 9 * 3";
    "3 * 4";
    "(3 * 2 * (6 * 5 * 5) * 3) + 6 * 4 + (8 + 9 + (6 * 4)) + (3 * 9 * 5 * (6 * 3 + 2) * (3 * 2)) * 7";
    "5 + ((2 + 2 * 9 * 9 * 5 * 8) + 7 + 9) * 4";
    "(7 + 2) + 4 * 4 + (7 * 4) * (5 + 9 * 2)";
    "(4 + (2 * 8 + 2 * 6) * 3 + 2) * 9 * 3 * ((2 * 6) + 6 * 3 + 7 * (9 * 8 + 7 + 4)) + 2";
    "9 + (4 + 8) * (7 * 3 + 4) + 7";
    "9 + 5 * 9 * ((2 + 3 + 3 + 6 + 5) + 8) + 2 + (3 + (9 * 9) + 2 * (5 + 8 + 8 + 7) * (8 + 7 + 5 + 5 * 7 * 7) * (9 + 5 * 8 * 5 * 8 + 2))";
    "((6 * 9 * 5 * 3) + 5 + 3) * 9";
    "(8 * 6 + 7 + 2 + (4 * 7 + 7 + 8 + 8) + 8) + 4 + 3";
    "4 + (9 * 4 + (2 + 4 * 3) + 9 * 9 + 5) + 5 * 2 * 4";
    "6 + 2 + 4 + (8 * 8 * (7 * 2 + 7 * 2 * 9 + 6) + 9)";
    "8 * 8 * 6 * 5 * 5";
    "4 * 3 + (5 + 2 + 6 * (7 * 8 * 7 + 5) * 5 * 8) * (9 * (6 * 6 + 3 * 5) + 9 + 6) + 6 + (2 + (2 + 5) + 3)";
    "3 + (6 * 9 * (4 * 4) * (7 + 2 + 9 * 3 + 5 + 8)) + (3 * (6 + 7 * 4 + 9 * 8) + 3 * 5 + 9 * (5 + 9))";
    "(3 + (3 + 3 * 6) * 4) * 5";
];;

type position = {str: string; pos: int};;

let solve input =
    let rec read pos =
        let next_pos = {str = pos.str; pos = pos.pos + 1} in

        if pos.pos >= String.length pos.str then
            (next_pos, '#')
        else if String.get pos.str pos.pos = ' ' then
            read next_pos  (* Skip whitespace *)
        else (
            printf "%c" (String.get pos.str pos.pos);
            (next_pos, String.get pos.str pos.pos)) in

    let eval str =
        let rec eval_arg pos =
            let (pos1, c) = read pos in
            match c with
            | '0'..'9' -> (pos1, (int_of_char c) - (int_of_char '0'))
            | '(' -> eval_expr pos1
            | _ -> raise (Invalid_argument "expected arg")

        and eval_op pos prev =
            let (pos1, op) = read pos in
            if op = '#' || op = ')' then
                (pos1, prev)
            else
                let (pos2, arg) = eval_arg pos1 in
                let op_result =
                    match op with
                    | '+' -> prev + arg
                    | '-' -> prev - arg
                    | '*' -> prev * arg
                    | '/' -> prev / arg
                    | _ -> raise (Invalid_argument "expected op") in
                eval_op pos2 op_result

        and eval_expr pos =
            let (pos1, arg) = eval_arg pos in
            eval_op pos1 arg in

        let (pos, ret) = eval_expr {str = str; pos = 0} in
        printf " = %d\n" ret;
        ret in

    List.fold_left (fun sum s -> sum + (eval s)) 0 input;;

printf "result = %d\n" (solve input);;
